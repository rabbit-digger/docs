(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{403:function(t,e,a){"use strict";a.r(e);var r=a(10),s=Object(r.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"inside"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#inside"}},[t._v("#")]),t._v(" Inside")]),t._v(" "),a("p",[a("code",[t._v("rabbit-digger")]),t._v(" 内部的秘密🐰...")]),t._v(" "),a("h2",{attrs:{id:"net"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#net"}},[t._v("#")]),t._v(" Net")]),t._v(" "),a("p",[a("code",[t._v("Net")]),t._v(" 是 "),a("code",[t._v("rabbit-digger")]),t._v(" 的核心概念. 每个代理协议都是根据一个配置(如代理服务器地址, 认证方式, 基于的 "),a("code",[t._v("Net")]),t._v(") 构造一个新的 "),a("code",[t._v("Net")]),t._v(". 这个 "),a("code",[t._v("Net")]),t._v(" 提供了 "),a("code",[t._v("tcp_connect")]),t._v(" 和 "),a("code",[t._v("udp_bind")]),t._v(", 对使用者隐藏了服务器的连接细节, 能够让使用者直接调用 "),a("code",[t._v("tcp_connect")]),t._v(" 和 "),a("code",[t._v("udp_bind")]),t._v(".")]),t._v(" "),a("p",[a("code",[t._v("Net")]),t._v(" 的实现者不应该使用异步运行时提供的 "),a("code",[t._v("TcpStream")]),t._v(" 和 "),a("code",[t._v("UdpSocket")]),t._v(" 来连接代理服务器. 而是应该在 "),a("code",[t._v("Config")]),t._v(" 中声明 "),a("code",[t._v("NetRef")]),t._v(", 然后使用这个 "),a("code",[t._v("Net")]),t._v(" 来连接代理服务器.")]),t._v(" "),a("p",[t._v("因此, 每个代理协议都能够互相嵌套, 自然的实现了代理链.")]),t._v(" "),a("h2",{attrs:{id:"netref"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#netref"}},[t._v("#")]),t._v(" NetRef")]),t._v(" "),a("p",[a("code",[t._v("NetRef")]),t._v(" 是一个 "),a("code",[t._v("enum")]),t._v(", 有 "),a("code",[t._v("String")]),t._v(" 和 "),a("code",[t._v("Net")]),t._v(" 两种状态. 当 "),a("code",[t._v("Config")]),t._v(" 从文件读入时, "),a("code",[t._v("NetRef")]),t._v(" 是一个未解析的字符串. 而 "),a("code",[t._v("rabbit-digger")]),t._v(" 会根据引用关系一次将 "),a("code",[t._v("NetRef")]),t._v(" 解析成 "),a("code",[t._v("Net")]),t._v(" 实例, 然后传给 "),a("code",[t._v("NetFactory::new")]),t._v(".")]),t._v(" "),a("h2",{attrs:{id:"externalfile"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#externalfile"}},[t._v("#")]),t._v(" ExternalFile")]),t._v(" "),a("p",[a("code",[t._v("ExternalFile")]),t._v(" 可用在 "),a("code",[t._v("Config")]),t._v(" 中. 代表着这个字段是一个外部的文件. "),a("code",[t._v("ExternalFile")]),t._v(" 可以是文件, 也可以是 "),a("code",[t._v("Url")]),t._v(". 当 "),a("code",[t._v("ExternalFile")]),t._v(" 是文件且 "),a("code",[t._v("watch")]),t._v(" 为 "),a("code",[t._v("true")]),t._v(" 时, \b\b\b"),a("code",[t._v("Net")]),t._v(" 会在文件变更时被重建. 当 "),a("code",[t._v("Url")]),t._v(" 和 "),a("code",[t._v("interval")]),t._v(" 被设置时, 文件会被轮询, 并且在改变时重建 \b\b\b"),a("code",[t._v("Net")]),t._v(".")]),t._v(" "),a("h2",{attrs:{id:"config-处理流"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#config-处理流"}},[t._v("#")]),t._v(" Config 处理流")]),t._v(" "),a("p",[t._v("\b所有 "),a("code",[t._v("Config")]),t._v(" 类型都实现了 "),a("code",[t._v("Config")]),t._v(" trait, "),a("code",[t._v("rabbit-digger")]),t._v(" 会在加载 "),a("code",[t._v("Net")]),t._v(" 时调用 "),a("code",[t._v("Config::visit")]),t._v(" 来访问内部的字段, 并填入所有的 "),a("code",[t._v("NetRef")]),t._v(", "),a("code",[t._v("ExternalFile")]),t._v(". 在填入 "),a("code",[t._v("ExternalFile")]),t._v(" 的时候会记录所有使用到的文件, 并在文件变动的时候重新构建 "),a("code",[t._v("Net")]),t._v(".")]),t._v(" "),a("div",{staticClass:"language-flow extra-class"},[a("pre",{pre:!0,attrs:{class:"language-flow"}},[a("code",[t._v("input"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v("inputoutput"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Config"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("yaml\nmkctx"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v("operation"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" 创建配置上下文"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" 用于保存 Config 依赖的文件\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v("operation"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" 处理 Import 字段\nbuild"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v("operation"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" 构造 Net 和 Server\ncond"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v("condition"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" 依赖的文件\n是否改变"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v("\nrun_server"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v("operation"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" 运行 Server\n直到所有Server停止\n\ninput"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("mkctx"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("build"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("run_server"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("cond\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("cond")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("yes"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("left"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("mkctx\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("cond")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("no"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("run_server\n\n")])])])])}),[],!1,null,null,null);e.default=s.exports}}]);